package vm

import (
	"fmt"
	"go_interpreter/bytecode"
	"go_interpreter/compiler"
	"go_interpreter/object"
)

const stackCapacity = 2048

type VM struct {
	constants    []object.Object       // Constants generated by compiler
	instructions bytecode.Instructions // Instructions generated by compiler
	stack        []object.Object
	stackPointer int // stack[stackPointer-1] is top of stack
}

func BuildVM(bytecode *compiler.Bytecode) *VM {
	return &VM{
		instructions: bytecode.Instructions,
		constants:    bytecode.Constants,
		stack:        make([]object.Object, stackCapacity),
		stackPointer: 0,
	}
}

// Fetch-decode-execute cycle (instruction cycle)
func (vm *VM) Run() error {
	for i := 0; i < len(vm.instructions); i++ {
		// Fetch
		op := bytecode.Opcode(vm.instructions[i])

		// Decode
		switch op {
		case bytecode.OpConstant:
			// Execute
			constIndex := bytecode.ReadUint16(vm.instructions[i+1:])
			i += 2

			err := vm.push(vm.constants[constIndex])
			if err != nil {
				return err
			}
		case bytecode.OpAdd:
			//Execute
			right := vm.pop().(*object.Integer).Value
			left := vm.pop().(*object.Integer).Value
			sum := left + right

			vm.push(&object.Integer{Value: sum})
		case bytecode.OpPop:
			//Execute
			vm.pop()
		}
	}

	return nil
}

// Get last popped element (for debugging)
func (vm *VM) LastPopped() object.Object {
	return vm.stack[vm.stackPointer]
}

// Push to stack
func (vm *VM) push(o object.Object) error {
	if vm.stackPointer >= stackCapacity {
		return fmt.Errorf("Stack overflow")
	}

	vm.stack[vm.stackPointer] = o
	vm.stackPointer++
	return nil
}

// Pop from stack
func (vm *VM) pop() object.Object {
	o := vm.stack[vm.stackPointer-1]
	vm.stackPointer--
	return o
}
