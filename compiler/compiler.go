package compiler

import (
	"fmt"
	"go_interpreter/ast"
	"go_interpreter/bytecode"
	"go_interpreter/object"
)

type Bytecode struct {
	Instructions bytecode.Instructions // Instructions generated by compiler
	Constants    []object.Object       // Constants evaluated by compiler
}

type EmittedInstruction struct {
	Opcode   bytecode.Opcode // Opcode of emitted instruction
	Position int             // Position the instruction was emitted to
}

// Translates AST to bytecode
type Compiler struct {
	instructions            bytecode.Instructions // Generated bytecode
	constants               []object.Object       // Constant pool
	lastInstruction         EmittedInstruction    // Last emitted instruction
	secondToLastInstruction EmittedInstruction    // Second to last emitted instruction
	symbolTable             *SymbolTable          // Store info about each identifier
}

func BuildCompiler() *Compiler {
	return &Compiler{
		instructions:            bytecode.Instructions{},
		constants:               []object.Object{},
		lastInstruction:         EmittedInstruction{},
		secondToLastInstruction: EmittedInstruction{},
		symbolTable:             BuildSymbolTable(),
	}
}

func BuildStatefulCompiler(s *SymbolTable, constants []object.Object) *Compiler {
	compiler := BuildCompiler()
	compiler.symbolTable = s
	compiler.constants = constants
	return compiler
}

func (c *Compiler) Compile(node ast.Node) error {
	switch node := node.(type) {
	case *ast.Program:
		for _, statement := range node.Statements {
			err := c.Compile(statement)
			if err != nil {
				return err
			}
		}
	case *ast.Array:
		for _, e := range node.Elements {
			err := c.Compile(e)
			if err != nil {
				return err
			}
		}

		c.emit(bytecode.OpArray, len(node.Elements))
	case *ast.LetStatement:
		err := c.Compile(node.Value)
		if err != nil {
			return err
		}

		symbol := c.symbolTable.Define(node.Name.Value)
		c.emit(bytecode.OpSetGlobal, symbol.Index)
	case *ast.Identifier:
		symbol, ok := c.symbolTable.Resolve(node.Value)

		// Throw a compile-time error if identifier doesn't exist
		if !ok {
			return fmt.Errorf("undefined variable %s", node.Value)
		}

		c.emit(bytecode.OpGetGlobal, symbol.Index)
	case *ast.ExpressionStatement:
		err := c.Compile(node.Expression)
		if err != nil {
			return err
		}
		c.emit(bytecode.OpPop)
	case *ast.BlockStatement:
		for _, statement := range node.Statements {
			err := c.Compile(statement)
			if err != nil {
				return err
			}
		}
	case *ast.If:
		err := c.Compile(node.Condition)

		if err != nil {
			return err
		}

		// 9999 is a placeholder offset (will backpatch)
		// Save the position of OpJumpNotTruthy instruction
		jumpNotTruthyPosition := c.emit(bytecode.OpJumpNotTruthy, 9999)

		// Compile Consequence
		err = c.Compile(node.Consequence)
		if err != nil {
			return err
		}

		// Remove the OpPop immediately after the Consequence
		if c.lastInstruction.Opcode == bytecode.OpPop {
			c.instructions = c.instructions[:c.lastInstruction.Position]
			c.lastInstruction = c.secondToLastInstruction
		}

		// 9999 is a placeholder offset (will backpatch)
		// Save the position of OpJump instruction
		jumpPosition := c.emit(bytecode.OpJump, 9999)

		// Replace OpJumpNotTruthy operand
		afterConsequencePosition := len(c.instructions)
		c.replaceInstructionOperand(jumpNotTruthyPosition, afterConsequencePosition)

		// Compile Alternative
		if node.Alternative == nil {
			c.emit(bytecode.OpNull)
		} else {
			err := c.Compile(node.Alternative)
			if err != nil {
				return err
			}

			// Remove the OpPop immediately after the Alternative
			if c.lastInstruction.Opcode == bytecode.OpPop {
				c.instructions = c.instructions[:c.lastInstruction.Position]
				c.lastInstruction = c.secondToLastInstruction
			}
		}

		// Replace OpJump operand
		afterAlternativePosition := len(c.instructions)
		c.replaceInstructionOperand(jumpPosition, afterAlternativePosition)
	case *ast.Prefix:
		err := c.Compile(node.Value)
		if err != nil {
			return err
		}

		switch node.Operator {
		case "!":
			c.emit(bytecode.OpBang)
		case "-":
			c.emit(bytecode.OpMinus)
		default:
			return fmt.Errorf("unknown operator: %s", node.Operator)
		}
	case *ast.Infix:
		// Special case for < (turn into >)
		if node.Operator == "<" {
			err := c.Compile(node.Right)
			if err != nil {
				return err
			}

			err = c.Compile(node.Left)
			if err != nil {
				return err
			}

			c.emit(bytecode.OpGreater)
			return nil
		}

		err := c.Compile(node.Left)
		if err != nil {
			return err
		}

		err = c.Compile(node.Right)
		if err != nil {
			return err
		}

		switch node.Operator {
		case "+":
			c.emit(bytecode.OpAdd)
		case "-":
			c.emit(bytecode.OpSub)
		case "*":
			c.emit(bytecode.OpMul)
		case "/":
			c.emit(bytecode.OpDiv)
		case ">":
			c.emit(bytecode.OpGreater)
		case "==":
			c.emit(bytecode.OpEqual)
		case "!=":
			c.emit(bytecode.OpNotEqual)
		default:
			return fmt.Errorf("Unknown operator %s", node.Operator)
		}
	case *ast.IntegerLiteral:
		integer := &object.Integer{Value: node.Value}
		c.emit(bytecode.OpConstant, c.addConstant(integer))
	case *ast.Boolean:
		if node.Value {
			c.emit(bytecode.OpTrue)
		} else {
			c.emit(bytecode.OpFalse)
		}
	case *ast.String:
		str := &object.String{Value: node.Value}
		c.emit(bytecode.OpConstant, c.addConstant(str))
	}

	return nil
}

func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}

// Helper method to replace an instruction's operand
func (c *Compiler) replaceInstructionOperand(opPosition int, operand int) {
	op := bytecode.Opcode(c.instructions[opPosition])
	newInstruction := bytecode.Make(op, operand)
	c.replaceInstruction(opPosition, newInstruction)
}

// Helper method to replace an instruction at an offset
func (c *Compiler) replaceInstruction(position int, newInstruction []byte) {
	for i := 0; i < len(newInstruction); i++ {
		c.instructions[position+i] = newInstruction[i]
	}
}

// Helper method for adding constant to constant pool
func (c *Compiler) addConstant(obj object.Object) int {
	c.constants = append(c.constants, obj)
	return len(c.constants) - 1 // Return the constant's index
}

// Helper method for adding instruction
func (c *Compiler) addInstruction(instruction []byte) int {
	position := len(c.instructions)
	c.instructions = append(c.instructions, instruction...)
	return position
}

// Helper method to generate an instruction and add it to the results in memory
func (c *Compiler) emit(op bytecode.Opcode, operands ...int) int {
	instruction := bytecode.Make(op, operands...)
	position := c.addInstruction(instruction)
	c.setLastInstruction(op, position)
	return position // Return's starting position of newly emitted instruction
}

// Helper method to set last instruction and second to last instruction
func (c *Compiler) setLastInstruction(op bytecode.Opcode, position int) {
	c.secondToLastInstruction = c.lastInstruction
	c.lastInstruction = EmittedInstruction{op, position}
}
