package compiler

import (
	"fmt"
	"github.com/fatih/color"
	"go_interpreter/ast"
	"go_interpreter/bytecode"
	"go_interpreter/object"
	"sort"
)

var PRINT_COMPILER = false

type Bytecode struct {
	Instructions bytecode.Instructions // Instructions generated by compiler
	Constants    []object.Object       // Constants evaluated by compiler
}

type EmittedInstruction struct {
	Opcode   bytecode.Opcode // Opcode of emitted instruction
	Position int             // Position the instruction was emitted to
}

// Before entering new scope, push new CompilationScope onto scope stack
// When compiling inside scope, emit() only modifies current CompilationScope
// After leaving scope, pop it off scope stack and add instructions to *object.CompiledFunction
type CompilationScope struct {
	instructions            bytecode.Instructions // Generated bytecode
	lastInstruction         EmittedInstruction    // Last instruction emitted
	secondToLastInstruction EmittedInstruction    // Second to last instruction emitted
}

// Translates AST to bytecode
type Compiler struct {
	constants   []object.Object    // Constant pool
	scopes      []CompilationScope // Scope stack
	scopeIndex  int                // Top of scope stack
	symbolTable *SymbolTable       // Store info about each identifier
}

func BuildCompiler() *Compiler {
	mainScope := CompilationScope{
		instructions:            bytecode.Instructions{},
		lastInstruction:         EmittedInstruction{},
		secondToLastInstruction: EmittedInstruction{},
	}

	return &Compiler{
		constants:   []object.Object{},
		scopes:      []CompilationScope{mainScope},
		scopeIndex:  0,
		symbolTable: BuildSymbolTable(),
	}
}

func BuildStatefulCompiler(s *SymbolTable, constants []object.Object) *Compiler {
	compiler := BuildCompiler()
	compiler.symbolTable = s
	compiler.constants = constants
	return compiler
}

// Helper method to get instructions in current scope
func (c *Compiler) currentInstructions() bytecode.Instructions {
	return c.scopes[c.scopeIndex].instructions
}

func (c *Compiler) enterScope() {
	scope := CompilationScope{
		instructions:            bytecode.Instructions{},
		lastInstruction:         EmittedInstruction{},
		secondToLastInstruction: EmittedInstruction{},
	}

	c.scopes = append(c.scopes, scope)
	c.scopeIndex++

	// New inner symbol table when function's body is compiled
	c.symbolTable = BuildInnerSymbolTable(c.symbolTable)
}

func (c *Compiler) leaveScope() bytecode.Instructions {
	instructions := c.currentInstructions()
	c.scopes = c.scopes[:len(c.scopes)-1]
	c.scopeIndex--
	c.symbolTable = c.symbolTable.Outer
	return instructions
}

func (c *Compiler) Compile(node ast.Node) error {
	if PRINT_COMPILER {
		color.Green("Compile %T: %s", node, node.String())
	}
	switch node := node.(type) {
	case *ast.Program:
		for _, statement := range node.Statements {
			err := c.Compile(statement)
			if err != nil {
				return err
			}
		}
	case *ast.Call:
		err := c.Compile(node.Function)
		if err != nil {
			return err
		}

		c.emit(bytecode.OpCall)
	case *ast.ReturnStatement:
		err := c.Compile(node.Value)
		if err != nil {
			return err
		}
		c.emit(bytecode.OpReturnValue)
	case *ast.Function:
		c.enterScope()
		err := c.Compile(node.Body)
		if err != nil {
			return err
		}
		// Replace last pop with return
		if c.scopes[c.scopeIndex].lastInstruction.Opcode == bytecode.OpPop {
			lastPosition := c.scopes[c.scopeIndex].lastInstruction.Position
			c.replaceInstruction(lastPosition, bytecode.Make(bytecode.OpReturnValue))
			c.scopes[c.scopeIndex].lastInstruction.Opcode = bytecode.OpReturnValue
		}
		// Handle empty function bodies
		if c.scopes[c.scopeIndex].lastInstruction.Opcode != bytecode.OpReturnValue {
			c.emit(bytecode.OpReturnNothing)
		}
		// Get number of local bindings
		numLocals := c.symbolTable.numDefinitions
		instructions := c.leaveScope()

		compiledFunction := &object.CompiledFunction{instructions, numLocals}
		c.emit(bytecode.OpConstant, c.addConstant(compiledFunction))
	case *ast.Index:
		err := c.Compile(node.Array)
		if err != nil {
			return err
		}

		err = c.Compile(node.Index)
		if err != nil {
			return err
		}

		c.emit(bytecode.OpIndex)
	case *ast.Hash:
		keys := []ast.Expression{}
		for key := range node.Pairs {
			keys = append(keys, key)
		}

		// Sort for easier testing
		sort.Slice(keys, func(i, j int) bool {
			return keys[i].String() < keys[j].String()
		})

		for _, key := range keys {
			err := c.Compile(key)
			if err != nil {
				return err
			}

			err = c.Compile(node.Pairs[key])
			if err != nil {
				return err
			}
		}

		c.emit(bytecode.OpHash, len(node.Pairs)*2)
	case *ast.Array:
		for _, e := range node.Elements {
			err := c.Compile(e)
			if err != nil {
				return err
			}
		}

		c.emit(bytecode.OpArray, len(node.Elements))
	case *ast.LetStatement:
		err := c.Compile(node.Value)
		if err != nil {
			return err
		}

		symbol := c.symbolTable.Define(node.Name.Value)
		if symbol.Scope == GlobalScope {
			c.emit(bytecode.OpSetGlobal, symbol.Index)
		} else {
			c.emit(bytecode.OpSetLocal, symbol.Index)
		}
	case *ast.Identifier:
		symbol, ok := c.symbolTable.Resolve(node.Value)

		// Throw a compile-time error if identifier doesn't exist
		if !ok {
			return fmt.Errorf("undefined variable %s", node.Value)
		}

		if symbol.Scope == GlobalScope {
			c.emit(bytecode.OpGetGlobal, symbol.Index)
		} else {
			c.emit(bytecode.OpGetLocal, symbol.Index)
		}
	case *ast.ExpressionStatement:
		err := c.Compile(node.Expression)
		if err != nil {
			return err
		}
		c.emit(bytecode.OpPop)
	case *ast.BlockStatement:
		for _, statement := range node.Statements {
			err := c.Compile(statement)
			if err != nil {
				return err
			}
		}
	case *ast.If:
		err := c.Compile(node.Condition)

		if err != nil {
			return err
		}

		// 9999 is a placeholder offset (will backpatch)
		// Save the position of OpJumpNotTruthy instruction
		jumpNotTruthyPosition := c.emit(bytecode.OpJumpNotTruthy, 9999)

		// Compile Consequence
		err = c.Compile(node.Consequence)
		if err != nil {
			return err
		}

		// Remove the OpPop immediately after the Consequence
		if c.scopes[c.scopeIndex].lastInstruction.Opcode == bytecode.OpPop {
			lastInstruction := c.scopes[c.scopeIndex].lastInstruction
			newInstructions := c.currentInstructions()[:lastInstruction.Position]

			c.scopes[c.scopeIndex].instructions = newInstructions
			c.scopes[c.scopeIndex].lastInstruction = c.scopes[c.scopeIndex].secondToLastInstruction
		}

		// 9999 is a placeholder offset (will backpatch)
		// Save the position of OpJump instruction
		jumpPosition := c.emit(bytecode.OpJump, 9999)

		// Replace OpJumpNotTruthy operand
		afterConsequencePosition := len(c.currentInstructions())
		c.replaceInstructionOperand(jumpNotTruthyPosition, afterConsequencePosition)

		// Compile Alternative
		if node.Alternative == nil {
			c.emit(bytecode.OpNull)
		} else {
			err := c.Compile(node.Alternative)
			if err != nil {
				return err
			}

			// Remove the OpPop immediately after the Alternative
			if c.scopes[c.scopeIndex].lastInstruction.Opcode == bytecode.OpPop {
				lastInstruction := c.scopes[c.scopeIndex].lastInstruction
				newInstructions := c.currentInstructions()[:lastInstruction.Position]

				c.scopes[c.scopeIndex].instructions = newInstructions
				c.scopes[c.scopeIndex].lastInstruction = c.scopes[c.scopeIndex].secondToLastInstruction
			}
		}

		// Replace OpJump operand
		afterAlternativePosition := len(c.currentInstructions())
		c.replaceInstructionOperand(jumpPosition, afterAlternativePosition)
	case *ast.Prefix:
		err := c.Compile(node.Value)
		if err != nil {
			return err
		}

		switch node.Operator {
		case "!":
			c.emit(bytecode.OpBang)
		case "-":
			c.emit(bytecode.OpMinus)
		default:
			return fmt.Errorf("unknown operator: %s", node.Operator)
		}
	case *ast.Infix:
		// Special case for < (turn into >)
		if node.Operator == "<" {
			err := c.Compile(node.Right)
			if err != nil {
				return err
			}

			err = c.Compile(node.Left)
			if err != nil {
				return err
			}

			c.emit(bytecode.OpGreater)
			return nil
		}

		err := c.Compile(node.Left)
		if err != nil {
			return err
		}

		err = c.Compile(node.Right)
		if err != nil {
			return err
		}

		switch node.Operator {
		case "+":
			c.emit(bytecode.OpAdd)
		case "-":
			c.emit(bytecode.OpSub)
		case "*":
			c.emit(bytecode.OpMul)
		case "/":
			c.emit(bytecode.OpDiv)
		case ">":
			c.emit(bytecode.OpGreater)
		case "==":
			c.emit(bytecode.OpEqual)
		case "!=":
			c.emit(bytecode.OpNotEqual)
		default:
			return fmt.Errorf("Unknown operator %s", node.Operator)
		}
	case *ast.IntegerLiteral:
		integer := &object.Integer{Value: node.Value}
		c.emit(bytecode.OpConstant, c.addConstant(integer))
	case *ast.Boolean:
		if node.Value {
			c.emit(bytecode.OpTrue)
		} else {
			c.emit(bytecode.OpFalse)
		}
	case *ast.String:
		str := &object.String{Value: node.Value}
		c.emit(bytecode.OpConstant, c.addConstant(str))
	}

	return nil
}

func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.currentInstructions(),
		Constants:    c.constants,
	}
}

// Helper method to replace an instruction's operand
func (c *Compiler) replaceInstructionOperand(opPosition int, operand int) {
	op := bytecode.Opcode(c.currentInstructions()[opPosition])
	newInstruction := bytecode.Make(op, operand)
	c.replaceInstruction(opPosition, newInstruction)
}

// Helper method to replace an instruction at an offset
func (c *Compiler) replaceInstruction(position int, newInstruction []byte) {
	instructions := c.currentInstructions()
	for i := 0; i < len(newInstruction); i++ {
		instructions[position+i] = newInstruction[i]
	}
}

// Helper method for adding constant to constant pool
func (c *Compiler) addConstant(obj object.Object) int {
	c.constants = append(c.constants, obj)
	return len(c.constants) - 1 // Return the constant's index
}

// Helper method for adding instruction
func (c *Compiler) addInstruction(instruction []byte) int {
	position := len(c.currentInstructions())
	updatedInstructions := append(c.currentInstructions(), instruction...)
	c.scopes[c.scopeIndex].instructions = updatedInstructions
	return position
}

// Helper method to generate an instruction and add it to the results in memory
func (c *Compiler) emit(op bytecode.Opcode, operands ...int) int {
	if PRINT_COMPILER {
		def, _ := bytecode.Lookup(byte(op))
		color.Red("Emit opcode %s %v", def.Name, operands)
	}

	instruction := bytecode.Make(op, operands...)
	position := c.addInstruction(instruction)
	c.setLastInstruction(op, position)
	return position // Returns starting position of newly emitted instruction
}

// Helper method to set last instruction and second to last instruction
func (c *Compiler) setLastInstruction(op bytecode.Opcode, position int) {
	c.scopes[c.scopeIndex].secondToLastInstruction = c.scopes[c.scopeIndex].lastInstruction
	c.scopes[c.scopeIndex].lastInstruction = EmittedInstruction{op, position}
}
